name: 02 - Fitce Infra Terraform

on:
  pull_request:
    branches:
      - main
    types: [closed, opened, synchronize]

jobs:
  terraform:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: "1.10.5"

      - name: Initialize Terraform
        working-directory: infra
        run: terraform init

      - name: Import and Verify Existing AWS Resources
        working-directory: infra
        env:
          TF_VAR_ec2_name: "${{ secrets.EC2_INSTANCE_ID }}"        
        run: |
          echo "üîç Verificando recursos existentes..."

          # Verifica e importa bucket S3
          if aws s3api head-bucket --bucket fitce-bucket-deploy 2>/dev/null; then
            echo "‚úÖ Bucket S3 'fitce-bucket-deploy' encontrado"
            terraform import aws_s3_bucket.deploy_bucket fitce-bucket-deploy || true
          else
            echo "‚ÑπÔ∏è Bucket S3 'fitce-bucket-deploy' n√£o encontrado"
          fi

          # Verifica e importa IAM Roles
          for role in DeveloperRole DevOpsRole AutomationRole; do
            ROLE_EXISTS=$(aws iam get-role --role-name $role --query 'Role.RoleName' --output text 2>/dev/null || echo "")
            if [[ "$ROLE_EXISTS" == "$role" ]]; then
              echo "‚úÖ Role '$role' encontrada"
              terraform import aws_iam_role.${role,,} $role || true
            else
              echo "‚ÑπÔ∏è Role '$role' n√£o encontrada"
            fi
          done

          # Verifica e importa IAM Policies
          for policy in DeveloperS3Access DevOpsS3Access AutomationS3Access; do
            POLICY_ARN=$(aws iam list-policies --scope Local --query "Policies[?PolicyName=='$policy'].Arn" --output text 2>/dev/null || echo "")
            if [[ -n "$POLICY_ARN" ]]; then
              echo "‚úÖ Policy '$policy' encontrada"
              terraform import aws_iam_policy.${policy,,}_policy $POLICY_ARN || true
            else
              echo "‚ÑπÔ∏è Policy '$policy' n√£o encontrada"
            fi
          done

          # Verifica e importa Role Policy Attachments
          for role in DeveloperRole DevOpsRole AutomationRole; do
            for policy in DeveloperS3Access DevOpsS3Access AutomationS3Access; do
              ATTACHED_ARN=$(aws iam list-attached-role-policies --role-name $role --query "AttachedPolicies[?PolicyName=='$policy'].PolicyArn" --output text 2>/dev/null || echo "")
              if [[ -n "$ATTACHED_ARN" ]]; then
                echo "‚úÖ Policy '$policy' anexada √† role '$role'"
                terraform import aws_iam_role_policy_attachment.${role,,}_policy_attachment "$role/$ATTACHED_ARN" || true
              else
                echo "‚ÑπÔ∏è Policy '$policy' n√£o est√° anexada √† role '$role'"
              fi
            done
          done

          echo "üîç Verifica√ß√£o de recursos conclu√≠da"

      - name: Terraform Validate
        working-directory: infra
        run: terraform validate

      - name: Terraform Plan
        working-directory: infra
        env:
          TF_VAR_ec2_name: "${{ secrets.EC2_INSTANCE_ID }}"
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: infra
        env:
          TF_VAR_ec2_name: "${{ secrets.EC2_INSTANCE_ID }}"
        run: terraform apply -auto-approve tfplan